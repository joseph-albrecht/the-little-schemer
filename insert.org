
* RECURSIVE INSERT LEFT ONCE
(defun insertL (new old lat)
  "Inserts the new atom to the left of the old atom in the lat"
  (cond
   ((null lat) ())
   ((equal old (car lat)) (cons new lat))
   (t (cons (car lat) (insertL new old (cdr lat))))))
 
** CALLS
(insertL 'forgot 'to '(you to add this word)) 

(insertL 'cool 'program '(this is a program))

* RECURSIVE INSERT RIGHT ONCE
(defun insertR (new old lat)
  "Insert new after the first instance of old in the list lat"
  (cond
   ((null lat) '())
   ((equal old (car lat)) (cons old (cons new (cdr lat))))
   (t (cons (car lat) (insertR new old (cdr lat))))))

** CALLS
(insertR 'nice 'its '(its to see you))

(insertR 'am 'I '(I the best))

* RECURSIVE INSERT LEFT ALL
(defun multiinsertL (new old lat)
  "Insert every instance new to the left of old"
  (cond
   ((null lat) ())
   ((equal old (car lat)) (cons new (cons old (multiinsertL new old (cdr lat)))))
   (t (cons (car lat) (multiinsertL new old (cdr lat))))))

** CALLS
(multiinsertL 'e 'm '(r m m b e r))

* RECURSIVE INSERT RIGHT ALL
(defun multiinsertR (new old lat)
  "insert new to the right of every old in lat"
  (cond
   ((null lat) ())
   ((equal old (car lat)) (cons old (cons new (multiinsertR new old (cdr lat)))))
   (t (cons (car lat) (multiinsertR new old (cdr lat))))))
   
** CALLS
(multiinsertR 'right 'left '(left left left right left))
