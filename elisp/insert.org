
* RECURSIVE INSERT LEFT ONCE
A recursive function that inserts the new item to the left of the first old item in lat
** FUNCTION
#+BEGIN_SRC emacs-lisp
(defun insertL (new old lat)
  "Inserts the new atom to the left of the old atom in the lat"
  (cond
   ((null lat) ())
   ((equal old (car lat)) (cons new lat))
   (t (cons (car lat) (insertL new old (cdr lat))))))
#+END_SRC
** TEST CALLS
#+BEGIN_SRC emacs-lisp
(insertL 'forgot 'to '(you to add this word)) 

(insertL 'cool 'program '(this is a program))
#+END_SRC
* RECURSIVE INSERT RIGHT ONCE
A recursive function that inserts the new item to the right of the first old item in lat
** FUNCTION
#+BEGIN_SRC emacs-lisp
(defun insertR (new old lat)
  "Insert new after the first instance of old in the list lat"
  (cond
   ((null lat) '())
   ((equal old (car lat)) (cons old (cons new (cdr lat))))
   (t (cons (car lat) (insertR new old (cdr lat))))))
#+END_SRC
** TEST CALLS
#+BEGIN_SRC emacs-lisp
(insertR 'nice 'its '(its to see you))

(insertR 'am 'I '(I the best))
#+END_SRC

* RECURSIVE INSERT LEFT ALL
A recursive function that inserts the new item to the left of every old item in lat
** FUNCTION
#+BEGIN_SRC emacs-lisp
(defun multiinsertL (new old lat)
  "Insert every instance new to the left of old"
  (cond
   ((null lat) ())
   ((equal old (car lat)) (cons new (cons old (multiinsertL new old (cdr lat)))))
   (t (cons (car lat) (multiinsertL new old (cdr lat))))))
#+END_SRC
** TEST CALLS
#+BEGIN_SRC emacs-lisp
(multiinsertL 'e 'm '(r m m b e r))
#+END_SRC

* RECURSIVE INSERT RIGHT ALL
A recursive function that inserts the new item to the right of every old item in lat
** FUNCTION
#+BEGIN_SRC emacs-lisp
(defun multiinsertR (new old lat)
  "insert new to the right of every old in lat"
  (cond
   ((null lat) ())
   ((equal old (car lat)) (cons old (cons new (multiinsertR new old (cdr lat)))))
   (t (cons (car lat) (multiinsertR new old (cdr lat))))))
#+END_SRC
** TEST CALLS
#+BEGIN_SRC emacs-lisp
(multiinsertR 'right 'left '(left left left right left))
#+END_SRC





* RECURSIVE INSERT RIGHT IN LIST
** FUNCTION
#+BEGIN_SRC emacs-lisp
  (defun insertR* (new old l)
    "Insert new to the right of old in a list l"
    (cond
     ((null l) ())
     ((listp (car l))
      (cons
       (insertR* new old (car l))
       (insertR* new old (cdr l))))
     (t
      (cons
       (car l)
       (cond
        ((eq old (car l))
         (cons
          new
          (insertR* new old (cdr l))))
        (t
         (insertR* new old (cdr l))))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (princ
   (format "insert a to the right of b in (b (b) b c b): %s"
           (insertR* 'a 'b '(b (b) b c b))))
#+END_SRC

#+RESULTS:
: insert a to the right of b in (b (b) b c b): (b a (b a) b a c b a)

