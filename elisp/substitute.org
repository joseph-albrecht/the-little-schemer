* REPLACE THE FIRST INSTANCE
** FUNCTION
#+BEGIN_SRC emacs-lisp
  (defun subst (new old lat)
    "Replace the first instance of old in lat with new"
    (cond
     ((null lat) ())
     ((equal old (car lat)) (cons new (cdr lat)))
     (t (cons (car lat) (subst new old (cdr lat))))))
#+END_SRC
** TEST CALLS
#+BEGIN_SRC emacs-lisp
  (subst 'joey 'bob '(my name is bob))
  (subst 'schemer 'memer '(the little memer))
#+END_SRC
* REPLACE THE FIRST INSTANCE OF ONE OF TWO OPTIONS
** FUNCTION
#+BEGIN_SRC emacs-lisp
  (defun subst2 (new o1 o2 lat)
    "Replaces the first occurence of o1 or o2 with new"
    (cond
     ((null lat) ())
     ((or (equal o1 (car lat))(equal o2 (car lat))) (cons new (cdr lat)))
     (t (cons (car lat) (subst2 new o1 o2 (cdr lat))))))
#+END_SRC 
** TEST CALLS
#+BEGIN_SRC emacs-lisp
  (subst2 'first 'second 'third '(third second first))
  (subst2 'my 'me 'mine '(my me mine))
#+END_SRC
* REPLACE ALL INSTANCES OF NEW
** FUNCTION
#+BEGIN_SRC emacs-lisp
  (defun multisubst (new old lat)
    "Replace all instances of old in lat with new"
    (cond
     ((null lat) ())
     ((equal old (car lat)) (cons new (multisubst new old (cdr lat))))
     (t (cons (car lat) (multisubst new old (cdr lat))))))
#+END_SRC
** TEST CALLS
#+BEGIN_SRC emacs-lisp
  (multisubst 'best 'worst '(I am the worst worst worst))
#+END_SRC
